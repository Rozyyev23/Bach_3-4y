{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.3"},"colab":{"name":"Копия блокнота \"Обзор типов данных pandas_1\"","provenance":[{"file_id":"18POKOd749sm5_Q4mQ2RZzVOwE-uerv21","timestamp":1644503804359},{"file_id":"https://github.com/dm-fedorov/pandas_basic/blob/master/%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE%D0%B5%20%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B2%20pandas/%D0%9E%D0%B1%D0%B7%D0%BE%D1%80%20%D1%82%D0%B8%D0%BF%D0%BE%D0%B2%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85%20pandas.ipynb","timestamp":1630574316369}],"collapsed_sections":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"8u0NyjF8y3ZE"},"source":["# Обзор типов данных Pandas"]},{"cell_type":"markdown","metadata":{"id":"4FcrURf5y3ZJ"},"source":["<a href=\"https://colab.research.google.com/github/dm-fedorov/pandas_basic/blob/master/быстрое%20введение%20в%20pandas/Обзор%20типов%20данных%20pandas.ipynb\"><img align=\"left\" src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open in Colab\" title=\"Open and Execute in Google Colaboratory\" target=\"_blank\"></a>"]},{"cell_type":"markdown","metadata":{"id":"eDBOxtDay3ZK"},"source":["## Введение\n","\n","В процессе анализа данных важно убедиться, что вы используете правильные типы данных; в противном случае можете получить неожиданные результаты или ошибки. В этой статье будут обсуждаться основные типы данных pandas (также известные как [`dtypes`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dtypes.html)), их сопоставление с типами данных Python и NumPy, а также варианты преобразования.\n","\n","> Оригинал статьи Криса [тут](http://pbpython.com/pandas_dtypes.html)."]},{"cell_type":"markdown","metadata":{"id":"FYYFjwRZy3ZL"},"source":["## Типы данных Pandas\n","\n","*Тип данных* - это, по сути, внутреннее представление, которое язык программирования использует для понимания того, как данные хранить и как ими оперировать. Например, программа должна понимать, что вы хотите сложить два числа, например `5 + 10`, чтобы получить `15`. Или, если у вас есть две строки, такие как `\"кошка\"` и `\"шляпа\"` вы можете объединить (сложить) их вместе, чтобы получить `\"кошкашляпа\"`.\n","\n","Проблема с типами данных pandas заключается в том, что между pandas, Python и NumPy существует некоторое совпадение. \n","\n","В следующей таблице приведены основные ключевые моменты:"]},{"cell_type":"markdown","metadata":{"id":"K5VIZKeJy3ZM"},"source":["|Pandas        | Python        | NumPy                                                         | Использование                                         |\n","|---           |---            |---                                                            |---                                                    |\n","|object        |str или смесь  |string_, unicode_, смешанные типы                              | Текстовые или смешанные числовые и нечисловые значения|\n","|int64         |int            |int_, int8, int16, int32, int64, uint8, uint16, uint32, uint64 | Целые числа                                           |\n","|float64       |float          |float_, float16, float32, float64                              | Числа с плавающей точкой                              |\n","|bool          |bool           |bool_                                                          | Значения True/False                                   |\n","|datetime64    |datetime             |datetime64[ns]                                                 | Значения даты и времени                               |\n","|timedelta[ns] |NA             |NA                                                             | Разность между двумя datetimes                        |\n","|category      |NA             |NA                                                             | Ограниченный список текстовых значений                |"]},{"cell_type":"markdown","metadata":{"id":"kgVtVwNwy3ZN"},"source":["В этом Блокноте я сосредоточусь на следующих типах данных pandas:\n","\n","- `object`\n","- `int64`\n","- `float64`\n","- `datetime64`\n","- `bool`\n","\n","Про тип `category` смотрите в [отдельной статье](https://pbpython.com/pandas_dtypes_cat.html). "]},{"cell_type":"markdown","metadata":{"id":"FmmUSWDay3ZO"},"source":["Тип данных `object` может фактически содержать несколько разных типов. Например, столбец `a` может включать целые числа, числа с плавающей точкой и строки, которые вместе помечаются как `object`. Следовательно, вам могут потребоваться некоторые дополнительные методы для обработки смешанных типов данных. \n","\n","В этой [статье](https://pbpython.com/currency-cleanup.html) (а [тут](http://dfedorov.spb.ru/pandas/%D0%9E%D1%87%D0%B8%D1%81%D1%82%D0%BA%D0%B0%20%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85%20%D0%BE%20%D0%B2%D0%B0%D0%BB%D1%8E%D1%82%D0%B5%20%D1%81%20%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E%20pandas.html) перевод статьи на русский язык) вы найдете инструкцию по очистке данных, представленных ниже."]},{"cell_type":"markdown","metadata":{"id":"5wnqt_2Ry3ZP"},"source":["## Почему нас это волнует?"]},{"cell_type":"markdown","metadata":{"id":"sAHm0gc3y3ZR"},"source":["Типы данных - одна из тех вещей, о которых вы, как правило, не заботитесь, пока не получите ошибку или неожиданные результаты. Это также одна из первых вещей, которую вы должны проверить после загрузки новых данных в pandas для дальнейшего анализа."]},{"cell_type":"markdown","metadata":{"id":"Ol5a65Ufy3ZS"},"source":["Я буду использовать очень простой CSV файл, чтобы проиллюстрировать пару распространенных ошибок, которые вы можете встретить."]},{"cell_type":"code","metadata":{"id":"2VKTA6TEy3ZT","executionInfo":{"status":"ok","timestamp":1644503822588,"user_tz":-180,"elapsed":3,"user":{"displayName":"Ата Розыев","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"06288832781787105034"}}},"source":["import pandas as pd\n","import numpy as np"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"epMSjqxxhhVl","executionInfo":{"status":"ok","timestamp":1631106581015,"user_tz":-180,"elapsed":70547,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"04c6ef51-2d70-448f-a7d1-fb0e7df7a56b"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"pn0EB2yzy3ZU"},"source":["#df = pd.read_csv(\"https://github.com/dm-fedorov/pandas_basic/blob/master/%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE%D0%B5%20%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B2%20pandas/data/sales_data_types.csv?raw=True\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YjrCzuSp2MKz"},"source":["df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/sales_data_types.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dKrtcWiiy3ZU","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1631107434724,"user_tz":-180,"elapsed":201,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"27a46a7d-2686-4731-e4dc-ec0042fd6069"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002.0</td>\n","      <td>Quest Industries</td>\n","      <td>$125,000.00</td>\n","      <td>$162500.00</td>\n","      <td>30.00%</td>\n","      <td>500</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278.0</td>\n","      <td>Smith Plumbing</td>\n","      <td>$920,000.00</td>\n","      <td>$101,2000.00</td>\n","      <td>10.00%</td>\n","      <td>700</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477.0</td>\n","      <td>ACME Industrial</td>\n","      <td>$50,000.00</td>\n","      <td>$62500.00</td>\n","      <td>25.00%</td>\n","      <td>125</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900.0</td>\n","      <td>Brekke LTD</td>\n","      <td>$350,000.00</td>\n","      <td>$490000.00</td>\n","      <td>4.00%</td>\n","      <td>75</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029.0</td>\n","      <td>Harbor Co</td>\n","      <td>$15,000.00</td>\n","      <td>$12750.00</td>\n","      <td>-15.00%</td>\n","      <td>Closed</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name         2016  ... Day  Year Active\n","0          10002.0  Quest Industries  $125,000.00  ...  10  2015      Y\n","1         552278.0    Smith Plumbing  $920,000.00  ...  15  2014      Y\n","2          23477.0   ACME Industrial   $50,000.00  ...  29  2016      Y\n","3          24900.0        Brekke LTD  $350,000.00  ...  27  2015      Y\n","4         651029.0         Harbor Co   $15,000.00  ...   2  2014      N\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"8SChSPH7y3ZV"},"source":["На первый взгляд данные выглядят нормально, поэтому попробуем выполнить некоторые операции. \n","\n","Сложим продажи за `2016` и `2017` годы:"]},{"cell_type":"code","metadata":{"id":"Vm9zTjlhy3ZV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107498345,"user_tz":-180,"elapsed":207,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"501832fd-2701-4bc6-b39f-f3f0b2f56771"},"source":["df['2016'] + df['2017']"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      $125,000.00$162500.00\n","1    $920,000.00$101,2000.00\n","2        $50,000.00$62500.00\n","3      $350,000.00$490000.00\n","4        $15,000.00$12750.00\n","dtype: object"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"bHUlxIwJy3ZW"},"source":["Выглядит странно. Мы хотели суммировать значения столбцов, но pandas их объединил, чтобы создать одну длинную строку. \n","\n","Ключ к разгадке проблемы - это строка, в которой написано `dtype: object`. \n","\n","`object` - это строка в pandas, поэтому он выполняет строковую конкатенацию вместо математического сложения."]},{"cell_type":"markdown","metadata":{"id":"sbcfisxly3ZW"},"source":["Если мы хотим увидеть все типы данных, которые находятся в кадре данных (`DataFrame`), то воспользуемся атрибутом `dtypes`:"]},{"cell_type":"code","metadata":{"id":"XkonKjbNy3ZW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107560983,"user_tz":-180,"elapsed":281,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"a2fcd633-5c90-446f-a2ea-87bea7552996"},"source":["df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number    float64\n","Customer Name       object\n","2016                object\n","2017                object\n","Percent Growth      object\n","Jan Units           object\n","Month                int64\n","Day                  int64\n","Year                 int64\n","Active              object\n","dtype: object"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"YeVQk126y3ZX"},"source":["Кроме того, функция [`df.info()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.info.html) показывает много полезной информации:"]},{"cell_type":"code","metadata":{"id":"JGgLlr_Iy3ZX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107643827,"user_tz":-180,"elapsed":204,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"375b5200-5543-4b14-fec9-d2272f9e6a3a"},"source":["df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 5 entries, 0 to 4\n","Data columns (total 10 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   Customer Number  5 non-null      float64\n"," 1   Customer Name    5 non-null      object \n"," 2   2016             5 non-null      object \n"," 3   2017             5 non-null      object \n"," 4   Percent Growth   5 non-null      object \n"," 5   Jan Units        5 non-null      object \n"," 6   Month            5 non-null      int64  \n"," 7   Day              5 non-null      int64  \n"," 8   Year             5 non-null      int64  \n"," 9   Active           5 non-null      object \n","dtypes: float64(1), int64(3), object(6)\n","memory usage: 528.0+ bytes\n"]}]},{"cell_type":"markdown","metadata":{"id":"ROYOdqnDy3ZX"},"source":["После просмотра автоматически назначаемых типов данных возникает несколько проблем:"]},{"cell_type":"markdown","metadata":{"id":"9SDWoakZy3ZX"},"source":["- `Customer Number` (Номер клиента) - `float64`, но должен быть `int64`.\n","- Столбцы `2016` и `2017` хранятся как `objects`, а не числовые значения, такие как `float64` или `int64`.\n","- `Percent Growth` (Единицы процентного роста) и `Jan Units` также хранятся как `objects`, а не числовые значения.\n","- У нас есть столбцы `Month`, `Day` и `Year`, которые нужно преобразовать в `datetime64`.\n","- Столбец `Active` должен быть логическим (`boolean`)."]},{"cell_type":"markdown","metadata":{"id":"X4n-CW_my3ZY"},"source":["Без проведения очистки данных будет сложно провести дополнительный анализ.\n","\n","> Чтобы преобразовать типы данных в pandas, есть три основных способа:\n","- Используйте метод [`astype()`](https://pandas.pydata.org/docs/reference/api/pandas.Series.astype.html), чтобы принудительно задать тип данных.\n","- Создайте настраиваемую (custom) функцию для преобразования данных.\n","- Используйте функции [`to_numeric()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_numeric.html) или [`to_datetime()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html)."]},{"cell_type":"markdown","metadata":{"id":"dTU9LkXHy3ZY"},"source":["## Использование функции astype()\n","\n","Самый простой способ преобразовать столбец данных в другой тип - использовать [`astype()`](https://pandas.pydata.org/docs/reference/api/pandas.Series.astype.html). Например, чтобы преобразовать `Customer Number` (Номер клиента) в целое число, можем сделать так:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w_OwUAZy5wH7","executionInfo":{"status":"ok","timestamp":1630575995344,"user_tz":-180,"elapsed":364,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"4eb5a012-0f34-46b2-f624-efdc7e4f72bc"},"source":["# проверить версию Python для Colab (ОС Ubuntu) с помощью\n","import sys\n","print(sys.version)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.7.11 (default, Jul  3 2021, 18:01:19) \n","[GCC 7.5.0]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0fi_nbNd54u0","executionInfo":{"status":"ok","timestamp":1630576023841,"user_tz":-180,"elapsed":392,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"96532c89-bc67-4ead-f26b-a8937e3a4568"},"source":["!ls -l /usr/bin/python3"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["lrwxrwxrwx 1 root root 25 Aug 25 13:20 /usr/bin/python3 -> /etc/alternatives/python3\n"]}]},{"cell_type":"code","metadata":{"id":"rn8igajyy3ZY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107721716,"user_tz":-180,"elapsed":226,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"008a1371-1da5-4368-a540-60e2143acc30"},"source":["df['Customer Number'].astype('int') # pandas понимает, что в итоге нужен int64"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0     10002\n","1    552278\n","2     23477\n","3     24900\n","4    651029\n","Name: Customer Number, dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"cB2AUpOuy3ZZ"},"source":["Чтобы изменить `Customer Number` в исходном кадре данных, обязательно присвойте его обратно столбцу, так как функция `astype()` возвращает копию:"]},{"cell_type":"code","metadata":{"id":"ayHuDHHdy3ZZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107781298,"user_tz":-180,"elapsed":203,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"623005e0-d6aa-4730-b90e-04ed15815f58"},"source":["df[\"Customer Number\"] = df['Customer Number'].astype('int')\n","df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number     int64\n","Customer Name      object\n","2016               object\n","2017               object\n","Percent Growth     object\n","Jan Units          object\n","Month               int64\n","Day                 int64\n","Year                int64\n","Active             object\n","dtype: object"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"n8XFmUEly3ZZ"},"source":["А вот новый кадр данных с `Customer Number` в качестве целого числа:"]},{"cell_type":"code","metadata":{"id":"qbmagC1Py3ZZ","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1631107798227,"user_tz":-180,"elapsed":245,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"62ff37fb-e547-4af2-fa64-e7a2e8474173"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>$125,000.00</td>\n","      <td>$162500.00</td>\n","      <td>30.00%</td>\n","      <td>500</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>$920,000.00</td>\n","      <td>$101,2000.00</td>\n","      <td>10.00%</td>\n","      <td>700</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>$50,000.00</td>\n","      <td>$62500.00</td>\n","      <td>25.00%</td>\n","      <td>125</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>$350,000.00</td>\n","      <td>$490000.00</td>\n","      <td>4.00%</td>\n","      <td>75</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>$15,000.00</td>\n","      <td>$12750.00</td>\n","      <td>-15.00%</td>\n","      <td>Closed</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name         2016  ... Day  Year Active\n","0            10002  Quest Industries  $125,000.00  ...  10  2015      Y\n","1           552278    Smith Plumbing  $920,000.00  ...  15  2014      Y\n","2            23477   ACME Industrial   $50,000.00  ...  29  2016      Y\n","3            24900        Brekke LTD  $350,000.00  ...  27  2015      Y\n","4           651029         Harbor Co   $15,000.00  ...   2  2014      N\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"pqQHkiWly3Za"},"source":["Все это выглядит хорошо и кажется довольно простым. \n","\n","Давайте попробуем проделать то же самое со столбцом `2016` и преобразовать его в число с плавающей точкой:"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"sLONvm8fy3Za","colab":{"base_uri":"https://localhost:8080/","height":340},"executionInfo":{"status":"error","timestamp":1631107815097,"user_tz":-180,"elapsed":202,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"96199a8d-186d-4833-c12a-293ecdb4094d"},"source":["# здесь появится исключение:\n","\n","df['2016'].astype('float')"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-4488b9399bfb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# здесь появится исключение:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'2016'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'float'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5546\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5547\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5548\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5549\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    602\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m     ) -> \"BlockManager\":\n\u001b[0;32m--> 604\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    605\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    606\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    407\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 409\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    410\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    593\u001b[0m             \u001b[0mvals1d\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 595\u001b[0;31m                 \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvals1d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    596\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m                 \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    995\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    996\u001b[0m         \u001b[0;31m# Explicit copy, or required since NumPy can't view from / to object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 997\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    998\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    999\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: '$125,000.00'"]}]},{"cell_type":"markdown","metadata":{"id":"sBAWs7TKy3Za"},"source":["Аналогичным образом мы можем попытаться преобразовать столбец `Jan Units` в целое число:"]},{"cell_type":"code","metadata":{"id":"FK7lDlRAy3Za","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"error","timestamp":1631107908754,"user_tz":-180,"elapsed":244,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"6b952f7e-c660-4464-b602-553397f6b0aa"},"source":["# здесь тоже появится исключение:\n","\n","df['Jan Units'].astype('int')"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-cefc84366acb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# здесь тоже появится исключение:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Jan Units'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'int'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5546\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5547\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5548\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5549\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5550\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    602\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m     ) -> \"BlockManager\":\n\u001b[0;32m--> 604\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    605\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    606\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    407\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    408\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 409\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    410\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    593\u001b[0m             \u001b[0mvals1d\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    594\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 595\u001b[0;31m                 \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvals1d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    596\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    597\u001b[0m                 \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    972\u001b[0m         \u001b[0;31m# work around NumPy brokenness, #1987\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    973\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0missubdtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minteger\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 974\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype_intsafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    975\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    976\u001b[0m         \u001b[0;31m# if we have a datetime/timedelta array of objects\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/lib.pyx\u001b[0m in \u001b[0;36mpandas._libs.lib.astype_intsafe\u001b[0;34m()\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'Closed'"]}]},{"cell_type":"markdown","metadata":{"id":"vHgDkVK2y3Za"},"source":["Оба примера возвращают исключения `ValueError`, т.е. преобразования не сработали.\n","\n","В каждом из случаев данные включали значения, которые нельзя было интерпретировать как числа. В столбцах продаж данные включают символ валюты `$`, а также запятую. В столбце `Jan Units` последним значением является `Closed` (Закрыто), которое не является числом; так что мы получаем исключение.\n","\n","Пока что `astype()` как инструмент для преобразования выглядит не очень хорошо. \n","\n","Мы должны попробовать еще раз в столбце `Active`."]},{"cell_type":"code","metadata":{"id":"Wu0PYGlQy3Zb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631107973737,"user_tz":-180,"elapsed":243,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"9343ff23-bb7f-4346-bee3-798d4726ac11"},"source":["df['Active'].astype('bool')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    True\n","1    True\n","2    True\n","3    True\n","4    True\n","Name: Active, dtype: bool"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"d39pWk0By3Zb"},"source":["На первый взгляд все выглядит нормально, но при ближайшем рассмотрении обнаруживается проблема. Все значения были интерпретированы как `True`, но последний клиент в столбце `Active` имеет флаг `N` вместо `Y`.\n","\n","Вывод из этого раздела такой - `astype()` будет работать, если:\n","\n","- данные чистые и могут быть просто интерпретированы как число;\n","- вы хотите преобразовать числовое значение в строковый объект, т.е. вызвать `astype('str')`.\n","\n","Если данные содержат нечисловые символы или неоднородны, то `astype()` будет плохим выбором для преобразования типов. Вам потребуется выполнить дополнительные преобразования, чтобы изменение типа работало правильно."]},{"cell_type":"markdown","metadata":{"id":"qlwmmMIny3Zb"},"source":["### Дополнительно\n","\n","Отметим, что `astype()` может принимать словарь имен столбцов и типов данных:"]},{"cell_type":"code","metadata":{"id":"EQ6rJoQUy3Zc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108028523,"user_tz":-180,"elapsed":264,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"4bcb6e09-d029-4a3b-f1b4-3c82527897d7"},"source":["df.astype({'Customer Number': 'int', 'Customer Name': 'str'}).dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number     int64\n","Customer Name      object\n","2016               object\n","2017               object\n","Percent Growth     object\n","Jan Units          object\n","Month               int64\n","Day                 int64\n","Year                int64\n","Active             object\n","dtype: object"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"9wIDq-gMy3Zc"},"source":["## Пользовательские функции преобразования\n","\n","Поскольку эти данные немного сложнее преобразовать, можно создать настраиваемую (custom) функцию, которую применим к каждому значению и преобразовать в соответствующий тип данных.\n","\n","Для конвертации валюты (этого конкретного набора данных) мы можем использовать простую функцию:"]},{"cell_type":"code","metadata":{"id":"_Mwor0UHy3Zc"},"source":["def convert_currency(val):\n","    \"\"\"\n","    Преобразует числовое значение строки в число с плавающей точкой:\n","     - удаляет $\n","     - удаляет запятые\n","     - преобразует в число с плавающей точкой\n","    \"\"\"\n","    new_val = val.replace(',', '').replace('$', '')\n","    return float(new_val)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Dm6ah27gy3Zc"},"source":["В коде используются строковые функции Python, чтобы очистить символы `$` и `,`, а затем преобразовать значение в число с плавающей точкой. В этом конкретном случае мы могли бы преобразовать значения в целые числа, но я предпочитаю использовать плавающую точку.\n","\n","Я также подозреваю, что кто-нибудь рекомендует использовать тип данных [`Decimal`](https://docs.python.org/3/library/decimal.html) для валюты. Это не встроенный тип в pandas, поэтому я намеренно придерживаюсь подхода с плавающей точкой.\n","\n","Также следует отметить, что функция преобразует число в питоновский `float`, но pandas внутренне преобразует его в `float64`. Как упоминалось ранее, я рекомендую разрешить pandas выполнять такие преобразования. Вам не нужно пытаться понижать до меньшего или повышать до большего размера байта, если вы действительно не знаете, зачем это нужно.\n","\n","Теперь мы можем использовать функцию [`apply`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html), чтобы применить ее ко всем значениям в столбце `2016`."]},{"cell_type":"code","metadata":{"id":"qSVcoR0Fy3Zd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108220171,"user_tz":-180,"elapsed":220,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"df1cc3e0-9d4c-4616-82cd-cb3cc0ab3efe"},"source":["df['2016'].apply(convert_currency)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    125000.0\n","1    920000.0\n","2     50000.0\n","3    350000.0\n","4     15000.0\n","Name: 2016, dtype: float64"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","metadata":{"id":"fvPFoI_py3Zd"},"source":["Успех! Все значения отображаются как `float64`, поэтому мы можем выполнять необходимые математические функции.\n","\n","Я уверен, что более опытные читатели спрашивают, почему я просто не использовал лямбда-функцию? \n","\n","Прежде чем я отвечу, вот что мы могли бы сделать в одной строке с помощью лямбда-функции:"]},{"cell_type":"code","metadata":{"id":"HG_UPOWRy3Zd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108371016,"user_tz":-180,"elapsed":222,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"0c4dee15-d7d4-4116-e088-5f5ea28662d1"},"source":["df['2016'].apply(lambda x: x.replace('$', '').replace(',', '')).astype('float')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    125000.0\n","1    920000.0\n","2     50000.0\n","3    350000.0\n","4     15000.0\n","Name: 2016, dtype: float64"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"CayWfljYy3Zd"},"source":["Используя `lambda`, мы можем упростить код до одной строки, что является совершенно правильным подходом. Этот подход вызывает у меня три основных опасения:\n","\n","- Если вы только изучаете Python / pandas, я думаю, что более длинная функция более читабельна. Основная причина в том, что она содержит комментарии и может быть разбита на несколько этапов. Новичку немного сложнее понять лямбда-функции.\n","- Во-вторых, если вы собираетесь использовать эту функцию для нескольких столбцов, я предпочитаю не дублировать длинную лямбда-функцию.\n","- Наконец, использование функции упрощает очистку данных при использовании `read_csv()`. Я расскажу об этом в конце Блокнота.\n","\n","Некоторые читатели могут возразить, что подходы на основе `lambda` имеют более высокую производительность по сравнению с пользовательской функцией. Это может быть правдой, но я считаю, что для обучения новых пользователей предпочтительнее использовать функциональный подход.\n","\n","Вот полный пример преобразования данных в обоих столбцах продаж с помощью функции `convert_currency`."]},{"cell_type":"code","metadata":{"id":"iJHytj3zy3Ze","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108489020,"user_tz":-180,"elapsed":214,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"f251d097-7f4a-4022-af3d-0ee44413f3bb"},"source":["df['2016'] = df['2016'].apply(convert_currency)\n","df['2017'] = df['2017'].apply(convert_currency)\n","\n","df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number      int64\n","Customer Name       object\n","2016               float64\n","2017               float64\n","Percent Growth      object\n","Jan Units           object\n","Month                int64\n","Day                  int64\n","Year                 int64\n","Active              object\n","dtype: object"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"bzlPnxqYy3Ze"},"source":["В качестве другого примера использования `lambda` против функции мы можем взглянуть на процесс исправления столбца `Percent Growth`. \n","\n","Используя `lambda`:"]},{"cell_type":"code","metadata":{"id":"cDwFqDNVy3Ze","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108531936,"user_tz":-180,"elapsed":235,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"db709f39-9759-433b-dfd1-b358f7f9c568"},"source":["df['Percent Growth'].apply(lambda x: x.replace('%', '')).astype('float') / 100"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    0.30\n","1    0.10\n","2    0.25\n","3    0.04\n","4   -0.15\n","Name: Percent Growth, dtype: float64"]},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","metadata":{"id":"UXJztXuWy3Zf"},"source":["То же самое и с пользовательской функцией:"]},{"cell_type":"code","metadata":{"id":"acfyzemhy3Zf"},"source":["def convert_percent(val):\n","    \"\"\"\n","    Преобразование процентной строки в фактический процент с плавающей точкой:\n","     - Удаляет %\n","     - Делит на 100, чтобы получить десятичную дробь\n","    \"\"\"\n","    new_val = val.replace('%', '')\n","    return float(new_val) / 100"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ashtuSNgy3Zf"},"source":["df['Percent Growth'] = df['Percent Growth'].apply(convert_percent)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"__m-Qrn1ploP","executionInfo":{"status":"ok","timestamp":1631108624039,"user_tz":-180,"elapsed":203,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"f06fa81d-480f-488f-84c6-4b62200096c0"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>125000.0</td>\n","      <td>162500.0</td>\n","      <td>0.30</td>\n","      <td>500</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>920000.0</td>\n","      <td>1012000.0</td>\n","      <td>0.10</td>\n","      <td>700</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>50000.0</td>\n","      <td>62500.0</td>\n","      <td>0.25</td>\n","      <td>125</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>350000.0</td>\n","      <td>490000.0</td>\n","      <td>0.04</td>\n","      <td>75</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>Y</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>15000.0</td>\n","      <td>12750.0</td>\n","      <td>-0.15</td>\n","      <td>Closed</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>N</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name      2016  ...  Day  Year Active\n","0            10002  Quest Industries  125000.0  ...   10  2015      Y\n","1           552278    Smith Plumbing  920000.0  ...   15  2014      Y\n","2            23477   ACME Industrial   50000.0  ...   29  2016      Y\n","3            24900        Brekke LTD  350000.0  ...   27  2015      Y\n","4           651029         Harbor Co   15000.0  ...    2  2014      N\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"cYp_Z9hdy3Zf"},"source":["Последняя настраиваемая функция, о которой я расскажу, использует [`np.where()`](https://numpy.org/doc/stable/reference/generated/numpy.where.html) для преобразования столбца `Active` в логическое значение. \n","\n","Основная идея состоит в том, чтобы использовать функцию `np.where()` для преобразования всех значений `Y` в `True`, а всему остальному назначить `False`."]},{"cell_type":"code","metadata":{"id":"Jtxvvqioy3Zf"},"source":["df[\"Active\"] = np.where(df[\"Active\"] == \"Y\", True, False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Idp87WMNy3Zg"},"source":["В результате получается следующий кадр данных:"]},{"cell_type":"code","metadata":{"id":"QOVjnYDuy3Zg","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1631108717145,"user_tz":-180,"elapsed":198,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"91aa5b33-19f5-4cba-d8a0-21c24f81e02b"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>125000.0</td>\n","      <td>162500.0</td>\n","      <td>0.30</td>\n","      <td>500</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>920000.0</td>\n","      <td>1012000.0</td>\n","      <td>0.10</td>\n","      <td>700</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>50000.0</td>\n","      <td>62500.0</td>\n","      <td>0.25</td>\n","      <td>125</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>350000.0</td>\n","      <td>490000.0</td>\n","      <td>0.04</td>\n","      <td>75</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>15000.0</td>\n","      <td>12750.0</td>\n","      <td>-0.15</td>\n","      <td>Closed</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name      2016  ...  Day  Year Active\n","0            10002  Quest Industries  125000.0  ...   10  2015   True\n","1           552278    Smith Plumbing  920000.0  ...   15  2014   True\n","2            23477   ACME Industrial   50000.0  ...   29  2016   True\n","3            24900        Brekke LTD  350000.0  ...   27  2015   True\n","4           651029         Harbor Co   15000.0  ...    2  2014  False\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"nh5vX8UZy3Zg"},"source":["Для `dtype` правильно установлено значение `bool`."]},{"cell_type":"code","metadata":{"id":"3Dt-xH7my3Zg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108738595,"user_tz":-180,"elapsed":221,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"27f82605-ac2e-4980-9011-b68b7af1a564"},"source":["df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number      int64\n","Customer Name       object\n","2016               float64\n","2017               float64\n","Percent Growth     float64\n","Jan Units           object\n","Month                int64\n","Day                  int64\n","Year                 int64\n","Active                bool\n","dtype: object"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"wZjdUvE4y3Zg"},"source":["Независимо от того, решите ли вы использовать лямбда-функцию или другой подход, например `np.where()`, все эти способы очень гибкие и могут быть настроены для ваших собственных уникальных потребностей в данных."]},{"cell_type":"markdown","metadata":{"id":"bGsQuFO_y3Zg"},"source":["## Вспомогательные функции pandas\n","\n","У pandas есть золотая середина между простой функцией `astype()` и более сложными пользовательскими функциями. Эти вспомогательные функции могут быть очень полезны для преобразования определенных типов данных.\n","\n","Если вы следовали инструкциям, вы заметите, что я ничего не делал с столбцами даты или столбцом `Jan Units`. Оба столбца могут быть преобразованы с помощью встроенных в pandas функций, таких как `pd.to_numeric()` и `pd.to_datetime()`.\n","\n","Причина, по которой преобразование `Jan Units` проблематично, заключается в том, что в столбце содержится нечисловое значение. Если бы мы попытались использовать `astype()`, то получили бы ошибку (как описано ранее). Функция `pd.to_numeric()` может обрабатывать эти значения более изящно:"]},{"cell_type":"code","metadata":{"id":"5OcitwMUy3Zh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108809287,"user_tz":-180,"elapsed":218,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"408290f7-cffe-4eeb-9b3d-932bd59fdb2f"},"source":["pd.to_numeric(df['Jan Units'], errors='coerce')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    500.0\n","1    700.0\n","2    125.0\n","3     75.0\n","4      NaN\n","Name: Jan Units, dtype: float64"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"67WrFMbay3Zh"},"source":["Следует отметить несколько моментов. Во-первых, функция легко обрабатывает данные и создает столбец `float64`. Кроме того, она заменяет недопустимое значение `Closed` на значение `NaN`, потому что мы передали аргумент `errors=coerce`. Мы можем оставить это значение там или заполнить его `0` с помощью `fillna(0)`:"]},{"cell_type":"code","metadata":{"id":"AebXH-Hzy3Zh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108865243,"user_tz":-180,"elapsed":201,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"73bdd797-1536-41b8-ee0e-06512772ec2a"},"source":["pd.to_numeric(df['Jan Units'], errors='coerce').fillna(0)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    500.0\n","1    700.0\n","2    125.0\n","3     75.0\n","4      0.0\n","Name: Jan Units, dtype: float64"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","metadata":{"id":"Q4rqyXahy3Zh"},"source":["Последнее преобразование, о котором я расскажу, - это преобразование отдельных столбцов месяца, дня и года в тип `datetime`. Функцию  [`pd.to_datetime()`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html) можно настраивать, но по умолчанию она также довольно умна."]},{"cell_type":"code","metadata":{"id":"53-eBP4_y3Zh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631108963679,"user_tz":-180,"elapsed":238,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"9594bf08-a7cf-43f2-cee5-f2a52b2bf1ae"},"source":["pd.to_datetime(df[['Month', 'Day', 'Year']])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0   2015-01-10\n","1   2014-06-15\n","2   2016-03-29\n","3   2015-10-27\n","4   2014-02-02\n","dtype: datetime64[ns]"]},"metadata":{},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"o66WDnsZy3Zh"},"source":["В этом случае функция объединяет столбцы в новую серию, соответствующую типу `datateime64`.\n","\n","Мы должны убедиться, что присвоили эти значения обратно кадру данных:"]},{"cell_type":"code","metadata":{"id":"yR3iQ7HKy3Zi"},"source":["df[\"Start_Date\"] = pd.to_datetime(df[['Month', 'Day', 'Year']])\n","df[\"Jan Units\"] = pd.to_numeric(df['Jan Units'], errors='coerce').fillna(0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ua7F7p-FrDbx"},"source":["df_1 = df.drop(df[['Month', 'Day', 'Year']],axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"n2oQgPnErVAL","executionInfo":{"status":"ok","timestamp":1631109084626,"user_tz":-180,"elapsed":227,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"22aad0ae-dc51-4eb8-e217-144d7412f563"},"source":["df_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Active</th>\n","      <th>Start_Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>125000.0</td>\n","      <td>162500.0</td>\n","      <td>0.30</td>\n","      <td>500.0</td>\n","      <td>True</td>\n","      <td>2015-01-10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>920000.0</td>\n","      <td>1012000.0</td>\n","      <td>0.10</td>\n","      <td>700.0</td>\n","      <td>True</td>\n","      <td>2014-06-15</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>50000.0</td>\n","      <td>62500.0</td>\n","      <td>0.25</td>\n","      <td>125.0</td>\n","      <td>True</td>\n","      <td>2016-03-29</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>350000.0</td>\n","      <td>490000.0</td>\n","      <td>0.04</td>\n","      <td>75.0</td>\n","      <td>True</td>\n","      <td>2015-10-27</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>15000.0</td>\n","      <td>12750.0</td>\n","      <td>-0.15</td>\n","      <td>0.0</td>\n","      <td>False</td>\n","      <td>2014-02-02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name      2016  ...  Jan Units  Active  Start_Date\n","0            10002  Quest Industries  125000.0  ...      500.0    True  2015-01-10\n","1           552278    Smith Plumbing  920000.0  ...      700.0    True  2014-06-15\n","2            23477   ACME Industrial   50000.0  ...      125.0    True  2016-03-29\n","3            24900        Brekke LTD  350000.0  ...       75.0    True  2015-10-27\n","4           651029         Harbor Co   15000.0  ...        0.0   False  2014-02-02\n","\n","[5 rows x 8 columns]"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"sgzgTsIky3Zi","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1631109151543,"user_tz":-180,"elapsed":208,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"6c2b0957-de9a-4f71-ea30-062f396ef026"},"source":["df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","      <th>Start_Date</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>125000.0</td>\n","      <td>162500.0</td>\n","      <td>0.30</td>\n","      <td>500.0</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>True</td>\n","      <td>2015-01-10</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>920000.0</td>\n","      <td>1012000.0</td>\n","      <td>0.10</td>\n","      <td>700.0</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>True</td>\n","      <td>2014-06-15</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>50000.0</td>\n","      <td>62500.0</td>\n","      <td>0.25</td>\n","      <td>125.0</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>True</td>\n","      <td>2016-03-29</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>350000.0</td>\n","      <td>490000.0</td>\n","      <td>0.04</td>\n","      <td>75.0</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>True</td>\n","      <td>2015-10-27</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>15000.0</td>\n","      <td>12750.0</td>\n","      <td>-0.15</td>\n","      <td>0.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>False</td>\n","      <td>2014-02-02</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name      2016  ...  Year  Active  Start_Date\n","0            10002  Quest Industries  125000.0  ...  2015    True  2015-01-10\n","1           552278    Smith Plumbing  920000.0  ...  2014    True  2014-06-15\n","2            23477   ACME Industrial   50000.0  ...  2016    True  2016-03-29\n","3            24900        Brekke LTD  350000.0  ...  2015    True  2015-10-27\n","4           651029         Harbor Co   15000.0  ...  2014   False  2014-02-02\n","\n","[5 rows x 11 columns]"]},"metadata":{},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"bAgK6zqWy3Zi"},"source":["Теперь данные правильно преобразованы во все нужные нам типы:"]},{"cell_type":"code","metadata":{"id":"8uBXaKX2y3Zi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631109157434,"user_tz":-180,"elapsed":203,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"131f9bc0-fcb0-4ce3-cf21-73fb927fef66"},"source":["df.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number             int64\n","Customer Name              object\n","2016                      float64\n","2017                      float64\n","Percent Growth            float64\n","Jan Units                 float64\n","Month                       int64\n","Day                         int64\n","Year                        int64\n","Active                       bool\n","Start_Date         datetime64[ns]\n","dtype: object"]},"metadata":{},"execution_count":42}]},{"cell_type":"markdown","metadata":{"id":"_ti1PsSty3Zi"},"source":["Кадр данных готов к анализу!"]},{"cell_type":"markdown","metadata":{"id":"F-8LZX3Qy3Zi"},"source":["## Собираем все вместе\n","\n","Основные концепции использования `astype()` и пользовательских функций могут быть включены на очень раннем этапе процесса анализа данных. Если у вас есть файл с данными, который вы собираетесь обрабатывать повторно, и он всегда имеет один и тот же формат, вы можете задать параметры `dtype` и `converters`, которые будут применяться при чтении данных. Полезно думать о `dtype` как о выполнении функции `astype()` для данных. Аргументы `converters` позволяют применять функции к различным входным столбцам аналогично подходам, описанным выше.\n","\n","Важно отметить, что вы можете применить `dtype` или функцию `converter` к указанному столбцу только один раз, используя этот подход. Если вы попытаетесь применить оба к одному столбцу, то `dtype` будет пропущен.\n","\n","Вот упрощенный пример, который выполняет почти все преобразования во время считывания данных:"]},{"cell_type":"code","metadata":{"id":"OWnjuWuOy3Zi"},"source":["df_2 = pd.read_csv(\"https://github.com/dm-fedorov/pandas_basic/blob/master/%D0%B1%D1%8B%D1%81%D1%82%D1%80%D0%BE%D0%B5%20%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B2%20pandas/data/sales_data_types.csv?raw=True\", \n","                   dtype={'Customer Number': 'int'},\n","                   converters={'2016': convert_currency,\n","                               '2017': convert_currency,\n","                               'Percent Growth': convert_percent,\n","                               'Jan Units': lambda x: pd.to_numeric(x, errors='coerce'),\n","                               'Active': lambda x: np.where(x == \"Y\", True, False)\n","                              })"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sCvGXtxHy3Zj","colab":{"base_uri":"https://localhost:8080/","height":204},"executionInfo":{"status":"ok","timestamp":1631109419772,"user_tz":-180,"elapsed":204,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"5b339226-ca01-4d60-d8b8-9b53a4d577be"},"source":["df_2"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Customer Number</th>\n","      <th>Customer Name</th>\n","      <th>2016</th>\n","      <th>2017</th>\n","      <th>Percent Growth</th>\n","      <th>Jan Units</th>\n","      <th>Month</th>\n","      <th>Day</th>\n","      <th>Year</th>\n","      <th>Active</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>10002</td>\n","      <td>Quest Industries</td>\n","      <td>125000.0</td>\n","      <td>162500.0</td>\n","      <td>0.30</td>\n","      <td>500.0</td>\n","      <td>1</td>\n","      <td>10</td>\n","      <td>2015</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>552278</td>\n","      <td>Smith Plumbing</td>\n","      <td>920000.0</td>\n","      <td>1012000.0</td>\n","      <td>0.10</td>\n","      <td>700.0</td>\n","      <td>6</td>\n","      <td>15</td>\n","      <td>2014</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>23477</td>\n","      <td>ACME Industrial</td>\n","      <td>50000.0</td>\n","      <td>62500.0</td>\n","      <td>0.25</td>\n","      <td>125.0</td>\n","      <td>3</td>\n","      <td>29</td>\n","      <td>2016</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24900</td>\n","      <td>Brekke LTD</td>\n","      <td>350000.0</td>\n","      <td>490000.0</td>\n","      <td>0.04</td>\n","      <td>75.0</td>\n","      <td>10</td>\n","      <td>27</td>\n","      <td>2015</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>651029</td>\n","      <td>Harbor Co</td>\n","      <td>15000.0</td>\n","      <td>12750.0</td>\n","      <td>-0.15</td>\n","      <td>NaN</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2014</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Customer Number     Customer Name      2016  ...  Day  Year  Active\n","0            10002  Quest Industries  125000.0  ...   10  2015    True\n","1           552278    Smith Plumbing  920000.0  ...   15  2014    True\n","2            23477   ACME Industrial   50000.0  ...   29  2016    True\n","3            24900        Brekke LTD  350000.0  ...   27  2015    True\n","4           651029         Harbor Co   15000.0  ...    2  2014   False\n","\n","[5 rows x 10 columns]"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","metadata":{"id":"YeTOwUNJvfI-"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HjqS8OsSy3Zj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1631109421608,"user_tz":-180,"elapsed":192,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"0375f059-4bb2-42ec-b14c-12e2f286b9f6"},"source":["df_2.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Customer Number      int64\n","Customer Name       object\n","2016               float64\n","2017               float64\n","Percent Growth     float64\n","Jan Units          float64\n","Month                int64\n","Day                  int64\n","Year                 int64\n","Active              object\n","dtype: object"]},"metadata":{},"execution_count":50}]},{"cell_type":"markdown","metadata":{"id":"8qFRJYOey3Zj"},"source":["Как упоминалось ранее, я решил включить пример `lambda`, а также пример функции для преобразования данных. Единственная функция, которую здесь нельзя применить, - это преобразование столбцов `Month`, `Day` и `Year` в соответствующий столбец `datetime`. Тем не менее, это мощное соглашение, которое может помочь улучшить конвейер обработки данных."]},{"cell_type":"markdown","metadata":{"id":"NCpdNk2ay3Zj"},"source":["## Резюме\n","\n","Один из первых шагов при изучении нового набора данных - убедиться, что типы данных установлены правильно. В большинстве случаев pandas делает разумные выводы, но в наборах данных достаточно тонкостей, поэтому важно знать, как использовать различные параметры преобразования данных, доступные в pandas. "]}]}