{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"ПЗ_1_Boston_sklearn.ipynb\"","provenance":[{"file_id":"10MqMf6tzrrOUXR_P4JXnumnKokEQpLAW","timestamp":1649325563332}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"IagME5lVQfTi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649325762824,"user_tz":-180,"elapsed":455,"user":{"displayName":"Ата Розыев","userId":"06288832781787105034"}},"outputId":"517d3175-a19c-43ea-d221-f51be3f09aca"},"source":["from sklearn.datasets import load_boston\n","boston = load_boston()\n","X = boston.data\n","y = boston.target\n","feature_names = boston.feature_names\n","print(X.shape) \n","print(y.shape) \n","print(feature_names) "],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["(506, 13)\n","(506,)\n","['CRIM' 'ZN' 'INDUS' 'CHAS' 'NOX' 'RM' 'AGE' 'DIS' 'RAD' 'TAX' 'PTRATIO'\n"," 'B' 'LSTAT']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n","\n","    The Boston housing prices dataset has an ethical problem. You can refer to\n","    the documentation of this function for further details.\n","\n","    The scikit-learn maintainers therefore strongly discourage the use of this\n","    dataset unless the purpose of the code is to study and educate about\n","    ethical issues in data science and machine learning.\n","\n","    In this special case, you can fetch the dataset from the original\n","    source::\n","\n","        import pandas as pd\n","        import numpy as np\n","\n","\n","        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n","        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n","        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n","        target = raw_df.values[1::2, 2]\n","\n","    Alternative datasets include the California housing dataset (i.e.\n","    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n","    dataset. You can load the datasets as follows::\n","\n","        from sklearn.datasets import fetch_california_housing\n","        housing = fetch_california_housing()\n","\n","    for the California housing dataset and::\n","\n","        from sklearn.datasets import fetch_openml\n","        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n","\n","    for the Ames housing dataset.\n","    \n","  warnings.warn(msg, category=FutureWarning)\n"]}]},{"cell_type":"code","metadata":{"id":"h6xtL4lPQrBL"},"source":["from sklearn.model_selection import train_test_split\n","# Split the dataset: 70% vs 30% \n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=12)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7QgobxBSRq9w"},"source":["import pandas as pd\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ybrbAnR7SOzb","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623051218130,"user_tz":-180,"elapsed":288,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"7ae85804-32ae-42a9-9ba9-b1f7f2bacc7c"},"source":["# initiate the linear model and fit with data\n","lm =LinearRegression()\n","lm.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"KAVFAZzzT2mk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623051336628,"user_tz":-180,"elapsed":294,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"41504e94-94db-475c-95bb-6db6f03c44ba"},"source":["print(\"The R-squared value is: {0:0.4f} \\n\".format(lm.score(X_train, y_train)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.7645 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WYe_59pwUgTN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623051339218,"user_tz":-180,"elapsed":310,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"3862f424-6aa8-4263-86ee-aaa2cea18c81"},"source":["param_df = pd.DataFrame({\"Features\": ['intercept'] + list(feature_names), \n","\"Coef\": [lm.intercept_] + list(lm.coef_)}) \n","cols = param_df.columns.tolist() \n","cols = cols[-1:]+cols[:-1] \n","param_df = param_df[cols] \n","print(param_df)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["         Coef   Features\n","0   37.937108  intercept\n","1   -0.121310       CRIM\n","2    0.044466         ZN\n","3    0.011342      INDUS\n","4    2.511246       CHAS\n","5  -16.231253        NOX\n","6    3.859068         RM\n","7   -0.009985        AGE\n","8   -1.500270        DIS\n","9    0.242143        RAD\n","10  -0.011072        TAX\n","11  -1.017753    PTRATIO\n","12   0.006814          B\n","13  -0.486738      LSTAT\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GnlXvvm9Vr9F"},"source":["#%% check performance on test data \n","predicted = lm.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9FHPdN3KWCFZ"},"source":["import numpy as np\n","mae = np.mean(abs(predicted-y_test))\n","rmse = np.sqrt(np.mean((predicted-y_test)**2))\n","rae = np.mean(abs(predicted-y_test))/np.mean(abs(y_test-np.mean(y_test)))\n","rse = np.mean((predicted-y_test)**2)/np.mean((y_test-np.mean(y_test))**2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fEutwNTWWLbT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623052410843,"user_tz":-180,"elapsed":278,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"a8c9ee09-7532-401c-ad73-3ca72ee2c5d2"},"source":["mae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3.6099040603818096"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"IIP1nsQnW0ZP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623052529405,"user_tz":-180,"elapsed":293,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"ecc846e5-5aa2-421f-c6ed-df25d995e953"},"source":["rmse"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["5.214975145375423"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"2HoD0CpyW4mB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623052538178,"user_tz":-180,"elapsed":307,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"b975149c-ce8a-49b7-ed3b-53c3ad984dbb"},"source":["rae"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5561156583252186"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"b3badiP8W5_I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623052539790,"user_tz":-180,"elapsed":284,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"26577be7-e1a4-4809-d770-5226bb58f250"},"source":["rse"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.326617449359983"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"u3u25lDoW7c5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623052559824,"user_tz":-180,"elapsed":266,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"d663c526-4d6a-464f-a3da-7f6cbe803007"},"source":["print(\"The R-squared value is: {0:0.4f}\".format(lm.score(X_test, y_test))) \n","print(\"Mean Absolute Error: {0:0.6f}\".format(mae)) \n","print(\"Root Mean Squared Error: {0:0.6f}\".format(rmse)) \n","print(\"Relative Absolute Error: {0:0.6f}\".format(rae)) \n","print(\"Relative Squared Error: {0:0.6f}\".format(rse)) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.6734\n","Mean Absolute Error: 3.609904\n","Root Mean Squared Error: 5.214975\n","Relative Absolute Error: 0.556116\n","Relative Squared Error: 0.326617\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wryaLYfFYF2J"},"source":["%matplotlib inline\n","import matplotlib.pyplot as plt\n","from sklearn import preprocessing\n","from sklearn.feature_selection import RFE\n","from sklearn.feature_selection import RFECV"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hyQFgFh6bN-f"},"source":["# initiate the linear model \n","lm = LinearRegression()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3BZE4wfTbVn1"},"source":["# scale the features \n","min_mascaler =  preprocessing.MinMaxScaler()\n","scaled_minmax = min_mascaler.fit_transform(X_train)\n","scaled_minmadf = pd.DataFrame(scaled_minmax, columns = feature_names)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1F8JB3VAb3mH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623054636119,"user_tz":-180,"elapsed":323,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"7da6243c-c926-4b97-b75f-61d24e5f7787"},"source":["# recursive feature elimination with cross validation, using r-squared as metric \n","rfecv = RFECV(estimator=lm, step=1, cv=5) \n","rfecv.fit(scaled_minmadf, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RFECV(cv=5,\n","      estimator=LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n","                                 normalize=False),\n","      min_features_to_select=1, n_jobs=None, scoring=None, step=1, verbose=0)"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"3wjWN1N8b6et","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623054637892,"user_tz":-180,"elapsed":4,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"6db0cbf3-80e6-45d0-ba0b-dadbc5115e6d"},"source":["# print the optimal number of feature \n","print(\"Optimal number of features : %d\" % rfecv.n_features_)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Optimal number of features : 6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aDQpaal9aBoP","colab":{"base_uri":"https://localhost:8080/","height":405},"executionInfo":{"status":"ok","timestamp":1623054640355,"user_tz":-180,"elapsed":342,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"839b76af-daaa-4b74-fad2-1f73bbb36e85"},"source":["# plot number of features VS. cross-validation scores \n","plt.figure(figsize=(6 * 1.618, 6)) \n","plt.xlabel(\"Number of features selected\") \n","plt.ylabel(\"mean-squared-error\") \n","plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f3f26cebb50>]"]},"metadata":{"tags":[]},"execution_count":25},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 698.976x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"k1srhlW3cXcR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623054874693,"user_tz":-180,"elapsed":275,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"4edf8f03-d258-4698-85e6-4896fe5d3987"},"source":["# %% fit model с выбранными функциями  \n","#%% fit model with selected features X_train_new = X_train[:,rfecv.support_] \n","X_train_new = X_train[:,rfecv.support_]\n","lm2 = LinearRegression() \n","lm2.fit(X_train_new, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"id":"iOpnVLhVgqV8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623054878581,"user_tz":-180,"elapsed":282,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"ad4e2067-ad82-41f3-99e1-aac3e9099e35"},"source":["predicted = lm2.predict(X_train_new)\n"," \n","rmse = np.sqrt(np.mean((predicted-y_train)**2))\n","print(\"Root Mean Squared Error: {0:0.4f}\" .format(rmse)) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Root Mean Squared Error: 4.6594\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_2Gq4UHGVhVI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623054920830,"user_tz":-180,"elapsed":286,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"9fad0974-0536-480f-836e-a1a1aea26f0f"},"source":["# print the R-squared \n","print(\"The R-squared value is: {0:0.4f} \\n\".format(lm2.score(X_train_new, y_train)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.7439 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hK6vrjpZWGUY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623055238931,"user_tz":-180,"elapsed":269,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"8913cb37-d37e-41a7-cc79-974c9a5711eb"},"source":["feature_cols_selected = list(np.array(feature_names)[rfecv.support_]) \n","# print intercept and coefficients\n","param_df = pd.DataFrame({\"Features\": ['intercept'] + feature_cols_selected , \n","\"Coef\": [lm2.intercept_] + list(lm2.coef_)})\n","\n","cols = param_df.columns.tolist()\n","cols = cols[-1:]+cols[:-1] \n","param_df = param_df[cols] \n","print(param_df)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["        Coef   Features\n","0  37.722274  intercept\n","1  -0.086733       CRIM\n","2 -17.797964        NOX\n","3   4.244288         RM\n","4  -1.177934        DIS\n","5  -1.111761    PTRATIO\n","6  -0.529948      LSTAT\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5kEm7EA5Wtmf"},"source":["# %% проверить производительность по тестовым данным \n","#%% check performance on test data\n","X_test_part = X_test[:,rfecv.support_]\n","predicted = lm2.predict(X_test_part)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yZ7vgPuTYiZH"},"source":["mae = np.mean(abs(predicted-y_test))\n","rmse = np.sqrt(np.mean((predicted-y_test)**2))\n","rae = np.mean(abs(predicted-y_test))/np.mean(abs(y_test-np.mean(y_test)))\n","rse = np.mean((predicted-y_test)**2)/np.mean((y_test-np.mean(y_test)))\n","rse = np.mean((predicted-y_test)**2)/np.mean((y_test-np.mean(y_test))**2)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nAvxTISfYUxX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1623055248324,"user_tz":-180,"elapsed":274,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"5a7f2763-ca21-46b0-b1ef-2db6f319c03c"},"source":["# print metrics on test data\n","print(\"The R-squared value is: {0:0.4f} \\n\".format(lm2.score(X_train_new, y_train)))\n","print(\"Mean Absolute Error: {0:0.6f}\".format(mae))\n","print(\"Root Mean Squared Error: {0:0.6f}\".format(rmse))\n","print(\"Relative Absolute Error: {0:0.6f}\".format(rae))\n","print(\"Relative Squared Error: {0:0.6f}\".format(rse))  "],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.7439 \n","\n","Mean Absolute Error: 3.867736\n","Root Mean Squared Error: 5.553711\n","Relative Absolute Error: 0.595835\n","Relative Squared Error: 0.370426\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"twunZWeqbvb_"},"source":["#%% use cross validation to estimate hyperparameters on a grid\n","#from sklearn.grid_search import GridSearchCV\n","from sklearn.model_selection import learning_curve, GridSearchCV\n","from sklearn.ensemble import GradientBoostingRegressor\n","from time import time"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6X9fYgoCcuLv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166757315,"user_tz":-180,"elapsed":1851,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"6857fdcd-a3ce-473f-dc15-3c548454f6d5"},"source":["gbm = GradientBoostingRegressor() \n","gbm.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n","                          init=None, learning_rate=0.1, loss='ls', max_depth=3,\n","                          max_features=None, max_leaf_nodes=None,\n","                          min_impurity_decrease=0.0, min_impurity_split=None,\n","                          min_samples_leaf=1, min_samples_split=2,\n","                          min_weight_fraction_leaf=0.0, n_estimators=100,\n","                          n_iter_no_change=None, presort='deprecated',\n","                          random_state=None, subsample=1.0, tol=0.0001,\n","                          validation_fraction=0.1, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":254}]},{"cell_type":"code","metadata":{"id":"UBSfMgfAizkO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166757316,"user_tz":-180,"elapsed":1848,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"faf0acc6-2228-4088-bb03-086cdc62ef37"},"source":["# print the R-squared \n","from sklearn.metrics import r2_score \n","print(\"The R-squared value is: {0:0.4f} \\n\".format(r2_score(y_train,gbm.predict(X_train)))) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.9851 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"JOTXQQsCxsjQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166757316,"user_tz":-180,"elapsed":1844,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"057686d6-9ed5-4bde-a3aa-c4c4fbf0af70"},"source":["params = {'n_estimators': 1000, 'max_depth': 3, 'min_samples_split': 4,\n","'learning_rate': 0.01, 'loss': 'ls', 'random_state': 0}\n","gbm_1 = GradientBoostingRegressor(**params)\n","gbm_1"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n","                          init=None, learning_rate=0.01, loss='ls', max_depth=3,\n","                          max_features=None, max_leaf_nodes=None,\n","                          min_impurity_decrease=0.0, min_impurity_split=None,\n","                          min_samples_leaf=1, min_samples_split=4,\n","                          min_weight_fraction_leaf=0.0, n_estimators=1000,\n","                          n_iter_no_change=None, presort='deprecated',\n","                          random_state=0, subsample=1.0, tol=0.0001,\n","                          validation_fraction=0.1, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":256}]},{"cell_type":"code","metadata":{"id":"Mi4hxbqsBSwU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166758371,"user_tz":-180,"elapsed":2895,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"da3b332a-6278-40e5-8039-42db04c689e0"},"source":["gbm_1.fit(X_train, y_train)\n","print(\"The R-squared value is: {0:0.4f} \\n\"\n",".format(r2_score(y_train, gbm_1.predict(X_train)))) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.9842 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ob_2h4BtzNvF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166754417,"user_tz":-180,"elapsed":113864,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"d914777a-e8b9-4d1b-9f8c-db848e76207b"},"source":["start = time()\n","tuned_params_gbm = {'n_estimators': [500, 1000],\n"," 'max_depth': [2, 4],\n"," 'min_samples_leaf': [2, 4],\n"," 'min_samples_split': [2, 6],\n"," 'learning_rate': [0.001, 0.01]}\n","gbm_scv = GridSearchCV(gbm, tuned_params_gbm, cv=5)\n","gbm_scv.fit(X_train, y_train)\n","print(\"The grid cross validation lasted {0:0.2f} seconds\".format(time() - start))\n","print(\"Best parameters set found on development set:\")\n","print(gbm_scv.best_params_)\n","#for params, mean_score, scores in gbm_scv_scores_:\n","#   print(\"{0:0.3f} (+/-{1:0.3f}) for {2:s}\"\n","#   .format(mean_score, scores.std() * 2, str(params)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The grid cross validation lasted 110.93 seconds\n","Best parameters set found on development set:\n","{'learning_rate': 0.01, 'max_depth': 4, 'min_samples_leaf': 4, 'min_samples_split': 2, 'n_estimators': 1000}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kZVYnO4H_akY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166754418,"user_tz":-180,"elapsed":113856,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"fca6c64f-9bde-49cc-fa38-2b2583e9f98f"},"source":["# подходящая модель с наилучшим набором значений параметров\n","# fit model with the best set of parameter values\n","params_2 = {'n_estimators': 100, 'max_depth': 5,  'min_samples_leaf': 2,\n"," 'min_samples_split': 6,\n"," 'learning_rate': 0.01, 'loss': 'ls'}\n","gbm_2 = GradientBoostingRegressor(**params_2)\n","gbm_2.fit(X_train, y_train)\n","# print the R-squared\n","from sklearn.metrics import r2_score\n","print(\"The R-squared value is: {0:0.4f} \\n\".\n"," format(r2_score(y_train,gbm_2.predict(X_train))))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.8243 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VuXeBIy0oQEf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614166754419,"user_tz":-180,"elapsed":113848,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"fe481b9f-e2d0-4128-f5c1-dbfd45745a76"},"source":["# %% проверить производительность на основе тестовых данных\n","#%% check performance on test data\n","predicted = gbm_2.predict(X_test)\n","\n","mae = np.mean(abs(predicted-y_test))\n","rmse = np.sqrt(np.mean((predicted-y_test)**2))\n","rae = np.mean(abs(predicted-y_test))/np.mean(abs(y_test-np.mean(y_test)))\n","rse = np.mean((predicted-y_test)**2)/np.mean((y_test-np.mean(y_test))**2)\n","\n","# print metrics on test data\n","from sklearn.metrics import r2_score\n","print(\"The R-squared value is: {0:0.4f} \\n\".format(r2_score(y_test,predicted)))\n","print(\"Mean Absolute Error: {0:0.6f}\".format(mae))\n","print(\"Root Mean Squared Error: {0:0.6f}\".format(rmse))\n","print(\"Relative Absolute Error: {0:0.6f}\".format(rae))\n","print(\"Relative Squared Error: {0:0.6f}\".format(rse))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The R-squared value is: 0.6936 \n","\n","Mean Absolute Error: 3.646350\n","Root Mean Squared Error: 5.051006\n","Relative Absolute Error: 0.561730\n","Relative Squared Error: 0.306401\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WFYdF97foe8R","colab":{"base_uri":"https://localhost:8080/","height":845},"executionInfo":{"status":"ok","timestamp":1614166755102,"user_tz":-180,"elapsed":114522,"user":{"displayName":"Павел Сахнюк","photoUrl":"","userId":"12726213032567316501"}},"outputId":"8194e1c3-4635-4299-c8e1-c16d5bfbf883"},"source":["# plot variable importance\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","feature_importance = gbm_2.feature_importances_\n","feature_importance = 100.0 * (feature_importance / feature_importance.max())\n","sorted_idx = np.argsort(feature_importance)[::-1]\n","\n","plt.figure(figsize=(6 * 1.618, 6))\n","index = np.arange(len(feature_names))\n","bar_width = 0.5\n","plt.bar(index, feature_importance[sorted_idx], color='black', alpha=0.5)\n","plt.xlabel('features')\n","plt.ylabel('importance')\n","plt.title('Feature importance')\n","plt.xticks(index + bar_width, np.array(feature_names)[sorted_idx])\n","plt.tight_layout()\n","plt.show()\n","\n","# plot deviance for training set and test set\n","test_score = np.zeros(params_2['n_estimators'])\n","for j, y_pred in enumerate(gbm_2.staged_predict(X_test)):\n","    test_score[j] = gbm_2.loss_(y_test, y_pred)\n","\n","plt.figure(figsize=(6 * 1.618, 6))\n","plt.title('Deviance')\n","plt.plot(np.arange(params_2['n_estimators']) + 1, gbm_2.train_score_, 'b-',\n","         label='Training Set Deviance')\n","plt.plot(np.arange(params_2['n_estimators']) + 1, test_score, 'r-',\n","         label='Test Set Deviance')\n","plt.legend(loc='upper right')\n","plt.xlabel('Boosting Iterations')\n","plt.ylabel('Deviance')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 698.976x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Deviance')"]},"metadata":{"tags":[]},"execution_count":226},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 698.976x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"zXNbjxcykBW7"},"source":[""],"execution_count":null,"outputs":[]}]}